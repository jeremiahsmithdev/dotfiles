# unbind-key -a # unbind keys not being binded anymore (unbinds ALL!!)
# source-file ~/.tmux.reset.conf
# source-file ~/.tmux.defaults #<< this one

# set -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

# set prefix
unbind C-b
set -g prefix `
bind-key ` send-prefix

# also binds TAB
# set-option -g prefix C-i

# bind-key C-Tab send-prefix
# bind-key C-Tab next-window

set -g mouse off
# setw -g mode-keys vi

# tmux resurrect


# tmux continuum
set -g @continuum-boot 'on'
set -g @continuum-restore 'on'


# ！！！importent！！！ 开启24 bit color 其他方式都无效
# set -g default-terminal "xterm-256color"
set-option -g default-terminal "screen-256color"
# set -g default-terminal "xterm-24bit"
# set -g default-terminal "xterm-256color"
# set -g default-terminal "screen-256color"
# set -ga terminal-overrides ",*256col*:Tc"

# enable tmux's set of vi bindings for navigating buffers
set -g mode-keys vi

# set default shell
set-option -g default-shell "/bin/zsh"

# rename window as cwd
set-option -g status-interval 5
set-option -g automatic-rename on
# set-option -g automatic-rename-format '#{b:pane_current_path}'
set-option -g automatic-rename-format '#{b:pane_current_path} #{pane_current_command}' # add current command
set-option -g allow-rename off

# enable mouse mode
set -g mouse on

# remove esc delay
set -sg escape-time 10

# don't rename windows automaticaly
# set -option -g allow-rename off

# new split windows created in same working directory
bind h split-window -v -c "#{pane_current_path}"
bind v split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"
bind R run-shell "Q"

# source-file ~/.nav.conf

# swap window
unbind-key .
bind-key . command-prompt "swap-window -t '%%'; select-window -t :'%%'"
# bind-key . { swap-window -t; previous-window }

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# # Smart pane switching with awareness of Vim splits.
# # See: https://github.com/christoomey/vim-tmux-navigator
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
#     | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
# tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
# if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
# if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
#     "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"
#
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l

# if-shell -F "#{!=:#{window_panes},1}" 'bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"'

set 'focus-events'

# NEW show git branch

# status line at top
set-option -g status-position bottom

# # bind C-l send-keys 'C-l'
# bind C-l send-keys -t.- 'clear' Enter
# bind 'if-shell -F "#{!=:#{window_panes},1}"

# PLUGINS
run-shell ~/tools/tmux-resurrect/resurrect.tmux
run-shell ~/tools/tmux-continuum/continuum.tmux


# Put this at the bottom of ~/.tmux.conf ($XDG_CONFIG_HOME/tmux/tmux.conf works too):
# FOR TPM
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible' # optional recommended

## COLORSCHEME: gruvbox dark
source ~/dotfiles/tmux.conf.gruvbox-dark
# set -g @plugin 'egel/tmux-gruvbox'
# TMUX-GRUVBOX Options:
# set -g @tmux-gruvbox 'dark' # or 'dark256', 'light', 'light256', 'dark'
# set -g @tmux-gruvbox-statusbar-alpha 'true'
# set -g @tmux-gruvbox-left-status-a '#S' # tmux's session name

# set -g @plugin 'bjesus/muxile'
# stopped working? hence above bindings...
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-resurrect'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
#
#
# #####################
not_tmux="ps -o state= -o comm= -t '#{pane_tty}' | \
  grep -iqE '^[^TXZ ]+ +(\\S+\\/)?(g?(view|n?vim?x?)(diff)?|fzf)\$'"

bind-key -n C-h if "$not_tmux" { send-keys C-h } {
  if -F '#{==:#{pane_at_left},1}' {
    run 'sh -c "yabai -m window --focus west || yabai -m display --focus west || yabai -m space --focus prev" 2>/dev/null || true'
  } {
    select-pane -L
  }
}

bind-key -n C-j if "$not_tmux" { send-keys C-j } {
  if -F '#{==:#{pane_at_bottom},1}' {
    run 'yabai -m window --focus south'
  } {
    select-pane -D
  }
}

bind-key -n C-k if "$not_tmux" { send-keys C-k } {
  if -F '#{==:#{pane_at_top},1}' {
    run 'yabai -m window --focus north'
  } {
    select-pane -U
  }
}
bind-key -n C-l if "$not_tmux" { send-keys C-l } {
  if -F '#{==:#{pane_at_right},1}' {
    run 'sh -c "yabai -m window --focus east || yabai -m display --focus east || yabai -m space --focus next" 2>/dev/null || true'
  } {
    select-pane -L
  }
}

bind-key -n M-h if "$not_tmux" 'send-keys M-h' 'resize-pane -L 3'
bind-key -n M-j if "$not_tmux" 'send-keys M-j' 'resize-pane -D 3'
bind-key -n M-k if "$not_tmux" 'send-keys M-k' 'resize-pane -U 3'
bind-key -n M-l if "$not_tmux" 'send-keys M-l' 'resize-pane -R 3'

bind-key -n M-H if "$not_tmux" { send-keys M-H } {
  swap-pane -t '{left-of}'; select-pane -t '!'
}

bind-key -n M-J if "$not_tmux" { send-keys M-J } {
  swap-pane -t '{down-of}'; select-pane -t '!'
}

bind-key -n M-K if "$not_tmux" { send-keys M-K } {
  swap-pane -t '{up-of}'; select-pane -t '!'
}

bind-key -n M-L if "$not_tmux" { send-keys M-L } {
  swap-pane -t '{right-of}'; select-pane -t '!'
}

# POPUP WINDOWS
# These two shortcuts provide popup windows in tmux. The lowercase version
# makes a popup that named uniquely to the working directory. This is great
# for making a popup window in a coding project.
#
# The uppercase version makes a "global" popup window. Great for persisting
# things globally for a long period of time.
bind g run-shell '\
    POPUP_NAME="popup-$(basename "#{pane_current_path}" | tr -cd "a-zA-Z0-9-")"; \
    if [ "#{session_name}" = "$POPUP_NAME" ]; then \
        tmux detach-client; \
    else \
        tmux display-popup -d "#{pane_current_path}" -xC -yC -w 80% -h 75% -E "tmux attach-session -t $POPUP_NAME || tmux new-session -s $POPUP_NAME"; \
    fi \
'

bind G run-shell '\
    POPUP_NAME="popup-global"; \
    if [ "#{session_name}" = "$POPUP_NAME" ]; then \
        tmux detach-client; \
    else \
        tmux display-popup -xC -yC -w 80% -h 75% -E "tmux attach-session -t $POPUP_NAME || tmux new-session -s $POPUP_NAME"; \
    fi \
'

run -b '~/.tmux/plugins/tpm/tpm'
